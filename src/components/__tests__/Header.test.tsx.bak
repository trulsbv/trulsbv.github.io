import { describe, it, expect, vi } from "vitest";
import { render, screen } from "@testing-library/react";
import { BrowserRouter } from "react-router-dom";
import Header from "../Header";
import { useTypedLocation } from "../../routes/hooks";

// Mock the routing hooks
vi.mock("../../routes/hooks", () => ({
  useTypedLocation: vi.fn(() => ({
    isHome: true,
    isAbout: false,
    isBlog: false,
    isContact: false,
  })),
}));

const renderWithRouter = (component: React.ReactElement) => {
  return render(<BrowserRouter>{component}</BrowserRouter>);
};

describe("Header", () => {
  it("renders the logo", () => {
    renderWithRouter(<Header />);
    expect(screen.getByText("Truls.dev")).toBeInTheDocument();
  });

  it("renders navigation links", () => {
    renderWithRouter(<Header />);
    expect(screen.getByText("Home")).toBeInTheDocument();
    expect(screen.getByText("About")).toBeInTheDocument();
    expect(screen.getByText("Blog")).toBeInTheDocument();
    expect(screen.getByText("Contact")).toBeInTheDocument();
  });

  it("has correct links to routes", () => {
    renderWithRouter(<Header />);

    const homeLink = screen.getByText("Home").closest("a");
    const aboutLink = screen.getByText("About").closest("a");
    const blogLink = screen.getByText("Blog").closest("a");
    const contactLink = screen.getByText("Contact").closest("a");

    expect(homeLink).toHaveAttribute("href", "/");
    expect(aboutLink).toHaveAttribute("href", "/about");
    expect(blogLink).toHaveAttribute("href", "/blog");
    expect(contactLink).toHaveAttribute("href", "/contact");
  });

  it("highlights the active section", () => {
    vi.mocked(useTypedLocation).mockReturnValue({
      pathname: "/about",
      isHome: false,
      isAbout: true,
      isBlog: false,
      isContact: false,
      isBlogPost: false,
    });

    renderWithRouter(<Header />);
    const aboutLink = screen.getByText("About");
    expect(aboutLink).toHaveStyle({ fontWeight: "600" });
  });
});
